// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Info {
  id          Int     @id @default(autoincrement())
  slogan      String
  brand       String
  at          String
  header      String
  mail        String
}

model Projet {
  id          Int     @id @default(autoincrement())
  img         String
  title       String
  content     String
  button      String
  published   Boolean @default(false)
}

model Article {
  id          Int     @id @default(autoincrement())
  badge       String
  title       String
  content     String
  button      String
  published   Boolean @default(false)
}

model Tarif {
  id          Int     @id @default(autoincrement())
  imgTop      String
  title       String
  content     String
  critaire1   String
  critaire2   String?
  critaire3   String?
  critaire4   String?
  critaire5   String?
  critaire6   String?
  critaire7   String?
  critaire8   String?
  price       String
  imgBottom   String
  populaire   Boolean @default(false)
  published   Boolean @default(false)
}

model Avis {
  id          Int     @id @default(autoincrement())  
  userName    String
  content     String
  stars       String
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          String?   @default("user")
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}